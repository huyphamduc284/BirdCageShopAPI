// <auto-generated />
using System;
using BirdCageShop.DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BirdCageShop.DataAccess.Migrations
{
    [DbContext(typeof(BirdCageShopContext))]
    [Migration("20231101054638_update")]
    partial class update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Equipment", b =>
                {
                    b.Property<string>("EquipmentId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("EquipmentID");

                    b.Property<decimal?>("Charge")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NotificationID");

                    b.Property<string>("Body")
                        .HasColumnType("ntext");

                    b.Property<int?>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("OrderID");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("method");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("OrderDetailID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("OrderID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("PaymentID");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<string>("Cvv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CVV");

                    b.Property<string>("ExpirationDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("OrderID");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ProductID");

                    b.Property<int?>("BirdCageType")
                        .HasColumnType("int");

                    b.Property<string>("BirdType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProductMaterial")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.ProductEquipment", b =>
                {
                    b.Property<string>("ProductEquipmentId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ProductEquipmentID");

                    b.Property<string>("EquipmentId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("EquipmentID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ProductID");

                    b.HasKey("ProductEquipmentId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductEquipment", (string)null);
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.Property<DateTime?>("BannedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "UQ__User__536C85E4C7AD2A74")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Voucher", b =>
                {
                    b.Property<string>("VoucherId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("VoucherID");

                    b.Property<string>("CouponCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Discount")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("VoucherId");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("ProductVoucher", b =>
                {
                    b.Property<string>("VoucherId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("VoucherID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ProductID");

                    b.HasKey("VoucherId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVoucher", (string)null);
                });

            modelBuilder.Entity("UserVoucher", b =>
                {
                    b.Property<string>("VoucherId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("VoucherID");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("UserID");

                    b.HasKey("VoucherId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserVoucher", (string)null);
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Notification", b =>
                {
                    b.HasOne("BirdCageShop.DataAccess.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Order", b =>
                {
                    b.HasOne("BirdCageShop.DataAccess.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.OrderDetail", b =>
                {
                    b.HasOne("BirdCageShop.DataAccess.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderDeta__Order__59063A47");

                    b.HasOne("BirdCageShop.DataAccess.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__OrderDeta__Produ__59FA5E80");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Payment", b =>
                {
                    b.HasOne("BirdCageShop.DataAccess.Models.Order", "PaymentNavigation")
                        .WithOne("Payment")
                        .HasForeignKey("BirdCageShop.DataAccess.Models.Payment", "PaymentId")
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Order");

                    b.Navigation("PaymentNavigation");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.ProductEquipment", b =>
                {
                    b.HasOne("BirdCageShop.DataAccess.Models.Equipment", "Equipment")
                        .WithMany("ProductEquipments")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK__ProductEq__Equip__4AB81AF0");

                    b.HasOne("BirdCageShop.DataAccess.Models.Product", "Product")
                        .WithMany("ProductEquipments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__ProductEq__Produ__49C3F6B7");

                    b.Navigation("Equipment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.User", b =>
                {
                    b.HasOne("BirdCageShop.DataAccess.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__RoleID__5070F446");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ProductVoucher", b =>
                {
                    b.HasOne("BirdCageShop.DataAccess.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVoucher_Product");

                    b.HasOne("BirdCageShop.DataAccess.Models.Voucher", null)
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductVoucher_Voucher");
                });

            modelBuilder.Entity("UserVoucher", b =>
                {
                    b.HasOne("BirdCageShop.DataAccess.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserVoucher_User");

                    b.HasOne("BirdCageShop.DataAccess.Models.Voucher", null)
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .IsRequired()
                        .HasConstraintName("FK_UserVoucher_Voucher");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Equipment", b =>
                {
                    b.Navigation("ProductEquipments");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductEquipments");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BirdCageShop.DataAccess.Models.User", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
